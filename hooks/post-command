#!/bin/bash
set -ueo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

run_service="$(plugin_read_config RUN)"
exitcode=$BUILDKITE_COMMAND_EXIT_STATUS

# shellcheck source=lib/shared.bash
. "$DIR/../lib/shared.bash"

# Checks for failed containers and writes logs for them the the provided dir
check_linked_containers_and_save_logs() {
  local service="$1"
  local logdir="$2"
  local uploadlogs="$3"
  local uploadall="false"

  if [[ "$uploadlogs" =~ ^(false|off|0|never)$ ]]; then
    # Skip all if we are not uploading logs
    return
  elif [[ "$uploadlogs" =~ ^(true|on|1|always)$ ]]; then
    uploadall="true"
  fi

  [[ -d "$logdir" ]] && rm -rf "$logdir"
  mkdir -p "$logdir"

  # Get list of container if to service labels
  containers=()
  while IFS=$'\n' read -r container ; do
    [[ -n "$container" ]] && containers+=("$container")
  done < <(docker_ps_by_project --format '{{.ID}}\t{{.Label "com.docker.compose.service"}}')

  # Iterate over containers, handling empty container array as a possibility
  for line in "${containers[@]+"${containers[@]}"}" ; do
    # Split tab-delimited tokens into service name and container id
    service_name="$(cut -d$'\t' -f2 <<<"$line")"
    service_container_id="$(cut -d$'\t' -f1 <<<"$line")"

    # Skip uploading logs for the primary service container
    if [[ "$service_name" == "$service" ]] ; then
      continue
    fi

    service_exit_code="$(docker inspect --format='{{.State.ExitCode}}' "$service_container_id")"

    # Buildkite's private S3 Bucket feature doesn't support artifacts with the same name in multiple steps.
    # https://jira.team.affirm.com/browse/DEVTOOLS-644
    if [[ "$BUILDKITE_STEP_KEY" != "" ]]; then
      service_name="$BUILDKITE_STEP_KEY-$service_name"
    fi

    # Capture logs if the linked container failed
    if [[ "$service_exit_code" -ne 0 ]] ; then
      echo "+++ :warning: Linked service $service_name exited with $service_exit_code"
      plugin_prompt_and_run docker logs --timestamps --tail 5 "$service_container_id"
      docker logs -t "$service_container_id" &>"${logdir}/${service_name}.log"
    elif $uploadall; then
      docker logs -t "$service_container_id" &>"${logdir}/${service_name}.log"
    fi
  done
}

if [[ $exitcode -ne 0 ]] ; then
  echo "^^^ +++"
  echo "+++ :warning: Failed to run command, exited with $exitcode"
fi

if [[ -n "${BUILDKITE_AGENT_ACCESS_TOKEN:-}" ]] ; then
  if [[ "$(plugin_read_config CHECK_LINKED_CONTAINERS "true")" != "false" ]] ; then

    # Get list of failed containers
    containers=()
    while read -r container ; do
      [[ -n "$container" ]] && containers+=("$container")
    done <<< "$(docker_ps_by_project -q)"

    failed_containers=()
    if [[ 0 != "${#containers[@]}" ]] ; then
      while read -r container ; do
        [[ -n "$container" ]] && failed_containers+=("$container")
      done <<< "$(docker inspect -f '{{if ne 0 .State.ExitCode}}{{.Name}}.{{.State.ExitCode}}{{ end }}' \
        "${containers[@]}")"
    fi

    if [[ 0 != "${#failed_containers[@]}" ]] ; then
      echo "+++ :warning: Some containers had non-zero exit codes"
      docker_ps_by_project \
        --format 'table {{.Label "com.docker.compose.service"}}\t{{ .ID }}\t{{ .Status }}'
    fi

    check_linked_containers_and_save_logs \
      "$run_service" "docker-compose-logs" \
      "$(plugin_read_config UPLOAD_CONTAINER_LOGS "always")"

    if [[ -d "docker-compose-logs" ]] && test -n "$(find docker-compose-logs/ -maxdepth 1 -name '*.log' -print)"; then
      echo "~~~ Uploading linked container logs"
      buildkite-agent artifact upload "docker-compose-logs/*.log"
    fi
  fi
fi
